{"version":3,"sources":["webpack:///./src/components/button/index.js","webpack:///./src/components/notice/index.js","webpack:///./src/pages/gen/help/index.js","webpack:///./src/components/help/index.js","webpack:///./src/components/button/button.module.sass","webpack:///./src/components/notice/notice.module.sass"],"names":["Button","ver","onClick","id","small","type","role","route","link","children","assignClasses","classes","styles","btn","find","el","href","className","buttonLink","Notice","notice","PureGenHelp","data","metadata","site","siteMetadata","toolInfo","gen","title","target","rel","GenHelp","props","useStaticQuery","PureHelp","canonical","toolTitle","description","Help","module","exports"],"mappings":"4FAAA,8CAoEeA,IA/DA,SAAC,GAUT,IATLC,EASI,EATJA,IACAC,EAQI,EARJA,QACAC,EAOI,EAPJA,GACAC,EAMI,EANJA,MACAC,EAKI,EALJA,KACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,KACAC,EACI,EADJA,SAEMC,EAAgB,WACpB,IAAIC,EAAUC,IAAOC,IAUrB,MARI,CAAC,UAAW,UAAW,UAAUC,MAAK,SAAAC,GAAE,OAAIA,IAAOd,OACrDU,GAAO,IAAQC,IAAOX,IAGpBG,IACFO,GAAO,IAAQC,IAAOR,OAGjBO,GAGT,OAAIH,EAEA,uBACEQ,KAAI,IAAMT,EACVJ,GAAIA,EACJc,UAAcP,IAAL,IAAwBE,IAAOM,YAEvCT,GAKH,4BACEP,QAASA,EACTC,GAAIA,EACJc,UAAWP,IACXL,KAAMA,GAAQ,SACdC,KAAMA,GAAQ,UAEbG,K,kCCjDT,8CAWeU,IANA,SAAC,GAAD,IAAGV,EAAH,EAAGA,SAAH,OAAkB,uBAAGQ,UAAWL,IAAOQ,QAASX,K,kCCL/D,gHAMaY,EAAc,SAAC,GAAc,IAAD,IAAXC,EAAW,EAAXA,KACtBC,EAAWD,SAAH,UAAGA,EAAME,YAAT,aAAG,EAAYC,aACvBC,EAAWH,SAAH,UAAGA,EAAUG,gBAAb,aAAG,EAAoBC,IAErC,OACE,kBAAC,IAAD,CAAMD,SAAUA,GACd,wBAAIvB,GAAG,SAAP,SACSoB,aADT,EACSA,EAAUK,MAChBF,EAASE,OAEZ,yEAC6C,2CAD7C,kFAGU,uBAAGZ,KAAK,WAAR,SAHV,2GAMA,uCACW,+CADX,iPAMA,8OAGqE,IACnE,mCAJF,yBAIsC,mCAJtC,iCAKkB,mCALlB,yEAM+B,mCAN/B,qCAOS,mCAPT,kCAOsD,mCAPtD,yEAUA,wBAAIb,GAAG,UAAP,UACA,sJAEiD,mCAFjD,IAEiE,IAC/D,mCAHF,QAGqB,mCAHrB,yEAI2C,mCAJ3C,KAI2D,mCAJ3D,QAKK,mCALL,qCAOA,wBAAIA,GAAG,WAAP,aACkB,oCAElB,uFAC2D,mCAD3D,2KAI0B,uBAAGa,KAAK,YAAR,WAJ1B,uCAKuB,wCALvB,KAK4C,wCAL5C,QAKqE,IACnE,wCANF,oBAMsC,qCANtC,oCAOmB,iEAPnB,KASA,wBAAIb,GAAG,SAAP,kBACuB,sCAEvB,kBAAC,IAAD,yDACA,oEACwC,qCADxC,2DAEwC,gDAFxC,4BAGqB,kDAHrB,yDAMA,wBAAIA,GAAG,YAAP,oBACyB,sCAEzB,kBAAC,IAAD,yDACA,uEAC2C,qCAD3C,2EAE2D,IACzD,gDAHF,2BAGsD,IACpD,qDAJF,yDAOA,wBAAIA,GAAG,WAAP,aACkB,oCAElB,kBAAC,IAAD,yDACA,wFAC4D,mCAAe,IAD3E,4FAGmB,iDAHnB,0BAGuE,IACrE,mCAJF,OAIoB,mCAJpB,qFAK2C,mCAL3C,qCAMmB,mCANnB,uCAMsE,IACpE,mCAPF,uEAUA,wBAAIA,GAAG,aAAP,eACoB,oCAEpB,kBAAC,IAAD,yDACA,4EACgD,mCADhD,6KAIsB,0CAJtB,mBAI4D,IAC1D,gDALF,yBAKoD,IAClD,yDANF,kBAMsD,IACpD,6CAPF,KASA,wBAAIA,GAAG,YAAP,wBAC6B,sCAE7B,kBAAC,IAAD,yDACA,yHAE8B,qCAF9B,sCAGsB,0CAHtB,mBAG4D,IAC1D,4CAJF,qCAIsE,IACpE,4DALF,KAOA,wBAAIA,GAAG,cAAP,oBACA,sGAC2E,IACzE,4CAFF,wPAOA,6TAKY,sCALZ,8FAQA,wBAAIA,GAAG,SAAP,+BACA,2CACe,wCADf,8FAEsD,uCAAmB,IAFzE,kFAIa,uCAJb,gCAI6D,IAC3D,wCALF,qCAOA,wBAAIA,GAAG,mBAAP,mBACA,6EACkD,IAChD,uBACEa,KAAK,qCACLa,OAAO,SACPC,IAAI,uBAHN,YAFF,KASKP,aATL,EASKA,EAAUK,MACZF,EAASE,MAVZ,wEAsCSG,UArBC,SAAAC,GACd,IAAMV,EAAOW,yBAAe,cAiB5B,OAAO,kBAACZ,EAAD,iBAAiBW,EAAjB,CAAwBV,KAAMA,O,kCCjLvC,8FAUaY,EAAW,SAAC,GAAkC,IAAD,EAA/BZ,EAA+B,EAA/BA,KAAMI,EAAyB,EAAzBA,SAAUjB,EAAe,EAAfA,SACnCc,EAAWD,SAAH,UAAGA,EAAME,YAAT,aAAG,EAAYC,aAE7B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEG,MAAK,IAAKL,aAAL,EAAKA,EAAUK,QAAQF,aAAvB,EAAuBA,EAAUE,OAAjC,QACLO,WAAcT,aAAL,EAAKA,EAAUlB,MAAf,UAEX,kBAAC,IAAD,CAAQA,MAAI,EAACD,MAAOmB,aAAF,EAAEA,EAAUlB,MAA9B,QAGA,wBACES,UAAWL,IAAOwB,WADpB,IAEKb,aAFL,EAEKA,EAAUK,QAAQF,aAFvB,EAEuBA,EAAUE,OAFjC,SAGA,uBAAGzB,GAAIS,IAAOyB,aAAd,IACMd,aADN,EACMA,EAAUK,QAAQF,aADxB,EACwBA,EAAUE,OADlC,KAC2CF,aAD3C,EAC2CA,EAAUW,cAEpD5B,IAmCQ6B,IAdF,SAAAN,GACX,IAAMV,EAAOW,yBAAe,cAU5B,OAAO,kBAACC,EAAD,iBAAcF,EAAd,CAAqBV,KAAMA,O,uBC3DpCiB,EAAOC,QAAU,CAAC,IAAM,4BAA4B,QAAU,gCAAgC,QAAU,gCAAgC,OAAS,+BAA+B,MAAQ,8BAA8B,WAAa,sC,uBCAnOD,EAAOC,QAAU,CAAC,OAAS,iC","file":"component---src-pages-gen-help-index-js-7267c4d3cbebda70a6a1.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './button.module.sass'\n\nconst Button = ({\n  ver,\n  onClick,\n  id,\n  small,\n  type,\n  role,\n  route,\n  link,\n  children\n}) => {\n  const assignClasses = () => {\n    let classes = styles.btn\n\n    if (['neutral', 'success', 'danger'].find(el => el === ver)) {\n      classes += ` ${styles[ver]}`\n    }\n\n    if (small) {\n      classes += ` ${styles.small}`\n    }\n\n    return classes\n  }\n\n  if (link) {\n    return (\n      <a\n        href={`/${route}`}\n        id={id}\n        className={`${assignClasses()} ${styles.buttonLink}`}\n      >\n        {children}\n      </a>\n    )\n  } else {\n    return (\n      <button\n        onClick={onClick}\n        id={id}\n        className={assignClasses()}\n        type={type || 'button'}\n        role={role || 'button'}\n      >\n        {children}\n      </button>\n    )\n  }\n}\n\nButton.propTypes = {\n  ver: PropTypes.oneOf(['neutral', 'success', 'danger']),\n  onClick: PropTypes.func,\n  id: PropTypes.string,\n  small: PropTypes.bool,\n  type: PropTypes.string,\n  role: PropTypes.string,\n  classes: PropTypes.object,\n  route: PropTypes.string,\n  link: PropTypes.bool,\n  children: PropTypes.string\n}\n\nexport default Button\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './notice.module.sass'\n\nconst Notice = ({ children }) => <p className={styles.notice}>{children}</p>\n\nNotice.propTypes = {\n  children: PropTypes.string\n}\n\nexport default Notice\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nimport Notice from '../../../components/notice'\nimport Help from '../../../components/help'\n\nexport const PureGenHelp = ({ data }) => {\n  const metadata = data?.site?.siteMetadata\n  const toolInfo = metadata?.toolInfo?.gen\n\n  return (\n    <Help toolInfo={toolInfo}>\n      <h3 id='using'>\n        Using {metadata?.title}\n        {toolInfo.title}\n      </h3>\n      <p>\n        The most important part of the tool is the <strong>Pattern</strong>.\n        This field defines how words will be formed using a specific syntax,\n        defined <a href='#syntax'>below</a>. This field can define specific\n        letters that can be used, or it can contain references to Subpatterns.\n      </p>\n      <p>\n        Up to 26 <strong>Subpatterns</strong> are available for use. These\n        subpatterns are defined in exactly the same way as the Pattern. Their\n        power lies in the fact that each Subpattern can be referenced by the\n        Pattern, allowing significantly more variability in word generation.\n      </p>\n      <p>\n        In the most common usage, a Subpattern generally represents a class of\n        phonemes while the Pattern represents the possible combinations of all\n        the phoneme classes. For example, one might use a Subpattern named{' '}\n        <code>V</code> to represent vowels, <code>C</code> to represent\n        consonants, and <code>N</code> to represent nasals. Alternatively, one\n        might use a Subpattern named <code>O</code> to represent the syllable\n        onset, <code>N</code> to represent the nucleus, and <code>C</code> to\n        represent the coda. There is great flexibility in Subpattern use.\n      </p>\n      <h4 id='syntax'>Syntax</h4>\n      <p>\n        The syntax is identical for all Pattern and Subpattern fields. Uppercase\n        versions of the standard English letters (e.g. <code>C</code>,{' '}\n        <code>V</code>, or <code>N</code>) are variables referring to\n        Subpatterns while any other letter (e.g. <code>a</code>, <code>s</code>,\n        or <code>n</code>) represents that specific glyph.\n      </p>\n      <h5 id='options'>\n        Options &ndash; <code>/</code>\n      </h5>\n      <p>\n        Multiple options can be separated using forward slashes (<code>/</code>\n        ). For each word, the tool will randomly select one of the options. By\n        default, each option will have the same chance of being chosen. This can\n        be changed by assigning <a href='#weights'>weights</a>. For example,\n        with the Subpatterns <code>V: a/i</code>, <code>C: t/s</code>, and{' '}\n        <code>N: m/n</code> and the Pattern <code>CVN</code>, the tool will\n        output the words <samp>sam tan tam tin sim san tim sin</samp>.\n      </p>\n      <h5 id='units'>\n        Single Units &ndash; <code>[ ]</code>\n      </h5>\n      <Notice>This functionality has not yet been implemented.</Notice>\n      <p>\n        Everything contained within brackets (<code>[ ]</code>) is treated as a\n        single unit. For example, the Pattern <code>as[tu/top/kan]</code> will\n        produce the output <code>astu astop askan</code>. Brackets and\n        parentheses can be nested unlimitedly.\n      </p>\n      <h5 id='optional'>\n        Optional Units &ndash; <code>( )</code>\n      </h5>\n      <Notice>This functionality has not yet been implemented.</Notice>\n      <p>\n        Everything contained within parentheses (<code>( )</code>) is treated as\n        a single unit that is optional. For example, the Pattern{' '}\n        <code>as(tu/top/kan)</code> will produce the output{' '}\n        <code>as astu astop askan</code>. Parentheses and brackets can be nested\n        unlimitedly.\n      </p>\n      <h5 id='weights'>\n        Weights &ndash; <code>*</code>\n      </h5>\n      <Notice>This functionality has not yet been implemented.</Notice>\n      <p>\n        Weights can be added to certain choices using an asterisk <code>*</code>{' '}\n        and a number to improve the likelihood of it being chosen. For example,\n        with the pattern <code>a/e*3/i*2/o/u*5</code>, the tool would output{' '}\n        <code>a</code> or <code>o</code> with equal probability, but compared to\n        these would be twice as likely to output <code>i</code>, three times as\n        likely to output <code>e</code>, and five times as likely to output{' '}\n        <code>u</code>. The number used as a weight must be an integer between 1\n        and 128.\n      </p>\n      <h5 id='filtering'>\n        Filtering &ndash; <code>^</code>\n      </h5>\n      <Notice>This functionality has not yet been implemented.</Notice>\n      <p>\n        Filtering can be added to units using a caret <code>^</code> and a\n        potential output to restrict the possible results. Multiple filters can\n        be added to the same unit to filter out multiple options. For example,\n        with the Subpattern <code>V: a/i/u</code> and hte Pattern{' '}\n        <code>t[VV]^aa^ii^uu</code>, the tool will output{' '}\n        <code>tai tau tia tiu tua tui</code>, filtering out{' '}\n        <code>taa tii tuu</code>.\n      </p>\n      <h5 id='escaping'>\n        Esaping Characters &ndash; <code>&quot; &quot;</code>\n      </h5>\n      <Notice>This functionality has not yet been implemented.</Notice>\n      <p>\n        Special characters otherwise used for the tool&rsquo;s syntax can be\n        escaped using double quotes <code>&quot; &quot;</code>. For example,\n        with the Subpattern <code>V: a/i/u</code> and the Pattern{' '}\n        <code>Vt&quot;V[n/m]&quot;</code>, the tool will produce the output{' '}\n        <code>atV[n/m] itV[n/m] utV[n/m]</code>.\n      </p>\n      <h4 id='generating'>Generating Words</h4>\n      <p>\n        Once the Pattern and all Subpatterns have been set up, you can click the{' '}\n        <strong>Generate</strong> button to generate words. There are also\n        several adjustments you can make, including the total number of words\n        that should be generated, whether each word should be written on a new\n        line, and whether the tool should filter out duplicate words.\n      </p>\n      <p>\n        After the words have been generated, some statistics are shown below,\n        including how many words were printed to the output, how many duplicates\n        were filtered out of the results (if any), and how many words are\n        possible based on the given Pattern and Subpatterns. (Note that the\n        number of <em>unique</em> words possible may actually be lower if there\n        are multiple ways to obtain the same word.)\n      </p>\n      <h4 id='files'>Saving and Loading Settings</h4>\n      <p>\n        Clicking the <strong>Save</strong> button will save the current settings\n        to the browser’s local storage and generate a small <code>.lngg</code>{' '}\n        text file containing the current settings that can be saved to your\n        disk. This <code>.lngg</code> file can be loaded using the{' '}\n        <strong>Open</strong> button to reload saved settings.\n      </p>\n      <h3 id='acknowledgments'>Acknowledgments</h3>\n      <p>\n        Much thanks should be given to Petr Mejzlík and{' '}\n        <a\n          href='https://github.com/nai888/awkwords'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          Awkwords\n        </a>\n        . {metadata?.title}\n        {toolInfo.title} was mainly built as a modernized and updated version of\n        Awkwords.\n      </p>\n    </Help>\n  )\n}\n\nconst GenHelp = props => {\n  const data = useStaticQuery(graphql`\n    query GenHelpQuery {\n      site {\n        siteMetadata {\n          title\n          toolInfo {\n            gen {\n              title\n              link\n              description\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return <PureGenHelp {...props} data={data} />\n}\n\nexport default GenHelp\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport PropTypes from 'prop-types'\n\nimport Layout from '../layout'\nimport SEO from '../seo'\nimport Button from '../button'\n\nimport styles from './help.module.sass'\n\nexport const PureHelp = ({ data, toolInfo, children }) => {\n  const metadata = data?.site?.siteMetadata\n\n  return (\n    <Layout>\n      <SEO\n        title={`${metadata?.title}${toolInfo?.title} Help`}\n        canonical={`${toolInfo?.link}/help`}\n      />\n      <Button link route={toolInfo?.link}>\n        Back\n      </Button>\n      <h2\n        className={styles.toolTitle}\n      >{`${metadata?.title}${toolInfo?.title} Help`}</h2>\n      <p id={styles.description}>\n        {`${metadata?.title}${toolInfo?.title} ${toolInfo?.description}`}\n      </p>\n      {children}\n    </Layout>\n  )\n}\n\nPureHelp.propTypes = {\n  data: PropTypes.object,\n  toolInfo: PropTypes.shape({\n    title: PropTypes.string,\n    link: PropTypes.string,\n    description: PropTypes.string\n  }).isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.string,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.element, PropTypes.string])\n    )\n  ])\n}\n\nconst Help = props => {\n  const data = useStaticQuery(graphql`\n    query HelpTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return <PureHelp {...props} data={data} />\n}\n\nexport default Help\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button-module--btn--1Vo01\",\"neutral\":\"button-module--neutral--3CChK\",\"success\":\"button-module--success--MfUtK\",\"danger\":\"button-module--danger--3YJms\",\"small\":\"button-module--small--gFeIB\",\"buttonLink\":\"button-module--button-link--2l7Ks\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notice\":\"notice-module--notice--14xfk\"};"],"sourceRoot":""}