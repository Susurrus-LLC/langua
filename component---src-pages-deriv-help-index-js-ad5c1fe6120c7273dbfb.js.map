{"version":3,"sources":["webpack:///./src/components/button/index.js","webpack:///./src/components/help/index.js","webpack:///./src/pages/deriv/help/index.js","webpack:///./src/components/button/button.module.sass"],"names":["Button","ver","onClick","id","small","type","role","route","link","children","assignClasses","classes","styles","btn","find","el","href","className","buttonLink","PureHelp","data","toolInfo","metadata","site","siteMetadata","title","canonical","toolTitle","description","Help","props","useStaticQuery","PureDerivHelp","deriv","target","rel","DerivHelp","module","exports"],"mappings":"2FAAA,8CAoEeA,IA/DA,SAAC,GAUT,IATLC,EASI,EATJA,IACAC,EAQI,EARJA,QACAC,EAOI,EAPJA,GACAC,EAMI,EANJA,MACAC,EAKI,EALJA,KACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,KACAC,EACI,EADJA,SAEMC,EAAgB,WACpB,IAAIC,EAAUC,IAAOC,IAUrB,MARI,CAAC,UAAW,UAAW,UAAUC,MAAK,SAAAC,GAAE,OAAIA,IAAOd,OACrDU,GAAO,IAAQC,IAAOX,IAGpBG,IACFO,GAAO,IAAQC,IAAOR,OAGjBO,GAGT,OAAIH,EAEA,uBACEQ,KAAI,IAAMT,EACVJ,GAAIA,EACJc,UAAcP,IAAL,IAAwBE,IAAOM,YAEvCT,GAKH,4BACEP,QAASA,EACTC,GAAIA,EACJc,UAAWP,IACXL,KAAMA,GAAQ,SACdC,KAAMA,GAAQ,UAEbG,K,kCCjDT,8FAUaU,EAAW,SAAC,GAAkC,IAAD,EAA/BC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAUZ,EAAe,EAAfA,SACnCa,EAAWF,SAAH,UAAGA,EAAMG,YAAT,aAAG,EAAYC,aAE7B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,MAAK,IAAKH,aAAL,EAAKA,EAAUG,QAAQJ,aAAvB,EAAuBA,EAAUI,OAAjC,QACLC,WAAcL,aAAL,EAAKA,EAAUb,MAAf,UAEX,kBAAC,IAAD,CAAQA,MAAI,EAACD,MAAOc,aAAF,EAAEA,EAAUb,MAA9B,QAGA,wBACES,UAAWL,IAAOe,WADpB,IAEKL,aAFL,EAEKA,EAAUG,QAAQJ,aAFvB,EAEuBA,EAAUI,OAFjC,SAGA,uBAAGtB,GAAIS,IAAOgB,aAAd,IACMN,aADN,EACMA,EAAUG,QAAQJ,aADxB,EACwBA,EAAUI,OADlC,KAC2CJ,aAD3C,EAC2CA,EAAUO,cAEpDnB,IAmCQoB,IAdF,SAAAC,GACX,IAAMV,EAAOW,yBAAe,cAU5B,OAAO,kBAACZ,EAAD,iBAAcW,EAAd,CAAqBV,KAAMA,O,kCC5DpC,sGAKaY,EAAgB,SAAC,GAAc,IAAD,IAAXZ,EAAW,EAAXA,KACxBE,EAAWF,SAAH,UAAGA,EAAMG,YAAT,aAAG,EAAYC,aACvBH,EAAWC,SAAH,UAAGA,EAAUD,gBAAb,aAAG,EAAoBY,MAErC,OACE,kBAAC,IAAD,CAAMZ,SAAUA,GACd,wBAAIlB,GAAG,SAAP,SACSmB,aADT,EACSA,EAAUG,MAChBJ,aAFH,EAEGA,EAAUI,OAEb,wBAAItB,GAAG,WAAP,WACA,2JAIA,wBAAIA,GAAG,eAAP,wBACA,yiBAUA,wBAAIA,GAAG,UAAP,UACA,wRAMA,ypBAYA,+PAMA,wBAAIA,GAAG,SAAP,+BACA,2CACe,wCADf,6FAE4D,IAC1D,uCAHF,mFAI2B,uCAJ3B,gCAI2E,IACzE,wCALF,qCAOA,wBAAIA,GAAG,mBAAP,mBACA,6EACkD,IAChD,uBACEa,KAAK,gDACLkB,OAAO,SACPC,IAAI,uBAHN,iBAFF,KASKb,aATL,EASKA,EAAUG,MACZJ,aAVH,EAUGA,EAAUI,MAVb,6EAsCSW,UArBG,SAAAN,GAChB,IAAMV,EAAOW,yBAAe,cAiB5B,OAAO,kBAACC,EAAD,iBAAmBF,EAAnB,CAA0BV,KAAMA,O,uBCnGzCiB,EAAOC,QAAU,CAAC,IAAM,4BAA4B,QAAU,gCAAgC,QAAU,gCAAgC,OAAS,+BAA+B,MAAQ,8BAA8B,WAAa,sC","file":"component---src-pages-deriv-help-index-js-ad5c1fe6120c7273dbfb.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './button.module.sass'\n\nconst Button = ({\n  ver,\n  onClick,\n  id,\n  small,\n  type,\n  role,\n  route,\n  link,\n  children\n}) => {\n  const assignClasses = () => {\n    let classes = styles.btn\n\n    if (['neutral', 'success', 'danger'].find(el => el === ver)) {\n      classes += ` ${styles[ver]}`\n    }\n\n    if (small) {\n      classes += ` ${styles.small}`\n    }\n\n    return classes\n  }\n\n  if (link) {\n    return (\n      <a\n        href={`/${route}`}\n        id={id}\n        className={`${assignClasses()} ${styles.buttonLink}`}\n      >\n        {children}\n      </a>\n    )\n  } else {\n    return (\n      <button\n        onClick={onClick}\n        id={id}\n        className={assignClasses()}\n        type={type || 'button'}\n        role={role || 'button'}\n      >\n        {children}\n      </button>\n    )\n  }\n}\n\nButton.propTypes = {\n  ver: PropTypes.oneOf(['neutral', 'success', 'danger']),\n  onClick: PropTypes.func,\n  id: PropTypes.string,\n  small: PropTypes.bool,\n  type: PropTypes.string,\n  role: PropTypes.string,\n  classes: PropTypes.object,\n  route: PropTypes.string,\n  link: PropTypes.bool,\n  children: PropTypes.string\n}\n\nexport default Button\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport PropTypes from 'prop-types'\n\nimport Layout from '../layout'\nimport SEO from '../seo'\nimport Button from '../button'\n\nimport styles from './help.module.sass'\n\nexport const PureHelp = ({ data, toolInfo, children }) => {\n  const metadata = data?.site?.siteMetadata\n\n  return (\n    <Layout>\n      <SEO\n        title={`${metadata?.title}${toolInfo?.title} Help`}\n        canonical={`${toolInfo?.link}/help`}\n      />\n      <Button link route={toolInfo?.link}>\n        Back\n      </Button>\n      <h2\n        className={styles.toolTitle}\n      >{`${metadata?.title}${toolInfo?.title} Help`}</h2>\n      <p id={styles.description}>\n        {`${metadata?.title}${toolInfo?.title} ${toolInfo?.description}`}\n      </p>\n      {children}\n    </Layout>\n  )\n}\n\nPureHelp.propTypes = {\n  data: PropTypes.object,\n  toolInfo: PropTypes.shape({\n    title: PropTypes.string,\n    link: PropTypes.string,\n    description: PropTypes.string\n  }).isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.string,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.element, PropTypes.string])\n    )\n  ])\n}\n\nconst Help = props => {\n  const data = useStaticQuery(graphql`\n    query HelpTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return <PureHelp {...props} data={data} />\n}\n\nexport default Help\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nimport Help from '../../../components/help'\n\nexport const PureDerivHelp = ({ data }) => {\n  const metadata = data?.site?.siteMetadata\n  const toolInfo = metadata?.toolInfo?.deriv\n\n  return (\n    <Help toolInfo={toolInfo}>\n      <h3 id='using'>\n        Using {metadata?.title}\n        {toolInfo?.title}\n      </h3>\n      <h4 id='lexemes'>Lexemes</h4>\n      <p>\n        Enter a list of all lexemes that should be used as roots to be derived\n        from. Also add a brief gloss for each of the lexemes.\n      </p>\n      <h4 id='derivations'>Derivational Affixes</h4>\n      <p>\n        Enter a list of all derivational affixes that should be used to derive\n        new words. Each gloss should contain a single hyphen that marks the\n        point at which the affix attaches to the root. If the hyphen is placed\n        at the start, the affix will be a suffix. If the hyphen is placed at the\n        end, the affix will be a prefix. If the hyphen is placed within the\n        affix, it will be split and attached as a circumfix on either side of\n        the root. Add a gloss for each of the affixes and a brief definition of\n        the change the affix creates.\n      </p>\n      <h4 id='derive'>Derive</h4>\n      <p>\n        When the list of lexemes and affixes is ready, click the Derive button\n        to generate a list of roots with possible derivational affixes added to\n        them. Hovering over the affix glosses in the results will display the\n        affix&rsquo;s definition below that gloss.\n      </p>\n      <p>\n        There are also a couple adjustments you can make. First, you can choose\n        the total number of words that should be derived from the input. The\n        tool will always filter out duplicates, so there will never be more\n        results than are mathematically possible given the input. Second, you\n        can choose the type of output that should be generated. You can choose\n        to use just a single root and generate the chosen number of words using\n        different affixes on that root, you can choose to use just a single\n        affix and generate the chosen number of words by attaching it to\n        different roots, or you can choose to randomly combine any root with any\n        affix.\n      </p>\n      <p>\n        After the derivations have been generated, some statistics are shown\n        below, including how many derivations were printed to the output and how\n        many derivations are possible based on the number of lexemes and affixes\n        provided.\n      </p>\n      <h4 id='files'>Saving and Loading Settings</h4>\n      <p>\n        Clicking the <strong>Save</strong> button will save the current settings\n        to the browser&rsquo;s local storage and generate a small{' '}\n        <code>.lngd</code> text file containing the current settings that can be\n        saved to your disk. This <code>.lngd</code> file can be loaded using the{' '}\n        <strong>Open</strong> button to reload saved settings.\n      </p>\n      <h3 id='acknowledgments'>Acknowledgments</h3>\n      <p>\n        Much thanks should be given to Jan Strasser and{' '}\n        <a\n          href='http://akana.conlang.org/tools/derivizer.html'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          the Derivizer\n        </a>\n        . {metadata?.title}\n        {toolInfo?.title} was mainly built as a modernized and updated version\n        of the Derivizer.\n      </p>\n    </Help>\n  )\n}\n\nconst DerivHelp = props => {\n  const data = useStaticQuery(graphql`\n    query DerivHelpQuery {\n      site {\n        siteMetadata {\n          title\n          toolInfo {\n            deriv {\n              title\n              link\n              description\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return <PureDerivHelp {...props} data={data} />\n}\n\nexport default DerivHelp\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button-module--btn--1Vo01\",\"neutral\":\"button-module--neutral--3CChK\",\"success\":\"button-module--success--MfUtK\",\"danger\":\"button-module--danger--3YJms\",\"small\":\"button-module--small--gFeIB\",\"buttonLink\":\"button-module--button-link--2l7Ks\"};"],"sourceRoot":""}