{"version":3,"sources":["webpack:///./src/components/button/index.js","webpack:///./src/pages/tree/help/index.js","webpack:///./src/components/notice/index.js","webpack:///./src/components/help/index.js","webpack:///./src/components/button/button.module.sass","webpack:///./src/components/notice/notice.module.sass"],"names":["Button","ver","onClick","id","small","type","role","route","link","children","assignClasses","classes","styles","btn","find","el","href","className","buttonLink","PureTreeHelp","data","metadata","site","siteMetadata","toolInfo","tree","title","TreeHelp","props","useStaticQuery","Notice","notice","PureHelp","canonical","toolTitle","description","Help","module","exports"],"mappings":"4FAAA,8CAoEeA,IA/DA,SAAC,GAUT,IATLC,EASI,EATJA,IACAC,EAQI,EARJA,QACAC,EAOI,EAPJA,GACAC,EAMI,EANJA,MACAC,EAKI,EALJA,KACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,KACAC,EACI,EADJA,SAEMC,EAAgB,WACpB,IAAIC,EAAUC,IAAOC,IAUrB,MARI,CAAC,UAAW,UAAW,UAAUC,MAAK,SAAAC,GAAE,OAAIA,IAAOd,OACrDU,GAAO,IAAQC,IAAOX,IAGpBG,IACFO,GAAO,IAAQC,IAAOR,OAGjBO,GAGT,OAAIH,EAEA,uBACEQ,KAAI,IAAMT,EACVJ,GAAIA,EACJc,UAAcP,IAAL,IAAwBE,IAAOM,YAEvCT,GAKH,4BACEP,QAASA,EACTC,GAAIA,EACJc,UAAWP,IACXL,KAAMA,GAAQ,SACdC,KAAMA,GAAQ,UAEbG,K,oCCjDT,iHAMaU,EAAe,SAAC,GAAc,IAAD,IAAXC,EAAW,EAAXA,KACvBC,EAAWD,SAAH,UAAGA,EAAME,YAAT,aAAG,EAAYC,aACvBC,EAAWH,SAAH,UAAGA,EAAUG,gBAAb,aAAG,EAAoBC,KAErC,OACE,kBAAC,IAAD,CAAMD,SAAUA,GACd,kBAAC,IAAD,wCACA,wBAAIrB,GAAG,SAAP,SACSkB,aADT,EACSA,EAAUK,MAChBF,aAFH,EAEGA,EAAUE,SA2BJC,UArBE,SAAAC,GACf,IAAMR,EAAOS,yBAAe,cAiB5B,OAAO,kBAACV,EAAD,iBAAkBS,EAAlB,CAAyBR,KAAMA,O,kCCvCxC,8CAWeU,IANA,SAAC,GAAD,IAAGrB,EAAH,EAAGA,SAAH,OAAkB,uBAAGQ,UAAWL,IAAOmB,QAAStB,K,kCCL/D,8FAUauB,EAAW,SAAC,GAAkC,IAAD,EAA/BZ,EAA+B,EAA/BA,KAAMI,EAAyB,EAAzBA,SAAUf,EAAe,EAAfA,SACnCY,EAAWD,SAAH,UAAGA,EAAME,YAAT,aAAG,EAAYC,aAE7B,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEG,MAAK,IAAKL,aAAL,EAAKA,EAAUK,QAAQF,aAAvB,EAAuBA,EAAUE,OAAjC,QACLO,WAAcT,aAAL,EAAKA,EAAUhB,MAAf,UAEX,kBAAC,IAAD,CAAQA,MAAI,EAACD,MAAOiB,aAAF,EAAEA,EAAUhB,MAA9B,QAGA,wBACES,UAAWL,IAAOsB,WADpB,IAEKb,aAFL,EAEKA,EAAUK,QAAQF,aAFvB,EAEuBA,EAAUE,OAFjC,SAGA,uBAAGvB,GAAIS,IAAOuB,aAAd,IACMd,aADN,EACMA,EAAUK,QAAQF,aADxB,EACwBA,EAAUE,OADlC,KAC2CF,aAD3C,EAC2CA,EAAUW,cAEpD1B,IAmCQ2B,IAdF,SAAAR,GACX,IAAMR,EAAOS,yBAAe,cAU5B,OAAO,kBAACG,EAAD,iBAAcJ,EAAd,CAAqBR,KAAMA,O,uBC3DpCiB,EAAOC,QAAU,CAAC,IAAM,4BAA4B,QAAU,gCAAgC,QAAU,gCAAgC,OAAS,+BAA+B,MAAQ,8BAA8B,WAAa,sC,uBCAnOD,EAAOC,QAAU,CAAC,OAAS,iC","file":"component---src-pages-tree-help-index-js-ea33dad0cdbb972eaf72.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './button.module.sass'\n\nconst Button = ({\n  ver,\n  onClick,\n  id,\n  small,\n  type,\n  role,\n  route,\n  link,\n  children\n}) => {\n  const assignClasses = () => {\n    let classes = styles.btn\n\n    if (['neutral', 'success', 'danger'].find(el => el === ver)) {\n      classes += ` ${styles[ver]}`\n    }\n\n    if (small) {\n      classes += ` ${styles.small}`\n    }\n\n    return classes\n  }\n\n  if (link) {\n    return (\n      <a\n        href={`/${route}`}\n        id={id}\n        className={`${assignClasses()} ${styles.buttonLink}`}\n      >\n        {children}\n      </a>\n    )\n  } else {\n    return (\n      <button\n        onClick={onClick}\n        id={id}\n        className={assignClasses()}\n        type={type || 'button'}\n        role={role || 'button'}\n      >\n        {children}\n      </button>\n    )\n  }\n}\n\nButton.propTypes = {\n  ver: PropTypes.oneOf(['neutral', 'success', 'danger']),\n  onClick: PropTypes.func,\n  id: PropTypes.string,\n  small: PropTypes.bool,\n  type: PropTypes.string,\n  role: PropTypes.string,\n  classes: PropTypes.object,\n  route: PropTypes.string,\n  link: PropTypes.bool,\n  children: PropTypes.string\n}\n\nexport default Button\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nimport Notice from '../../../components/notice'\nimport Help from '../../../components/help'\n\nexport const PureTreeHelp = ({ data }) => {\n  const metadata = data?.site?.siteMetadata\n  const toolInfo = metadata?.toolInfo?.tree\n\n  return (\n    <Help toolInfo={toolInfo}>\n      <Notice>This tool is still in planning.</Notice>\n      <h3 id='using'>\n        Using {metadata?.title}\n        {toolInfo?.title}\n      </h3>\n    </Help>\n  )\n}\n\nconst TreeHelp = props => {\n  const data = useStaticQuery(graphql`\n    query TreeHelpQuery {\n      site {\n        siteMetadata {\n          title\n          toolInfo {\n            tree {\n              title\n              link\n              description\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return <PureTreeHelp {...props} data={data} />\n}\n\nexport default TreeHelp\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './notice.module.sass'\n\nconst Notice = ({ children }) => <p className={styles.notice}>{children}</p>\n\nNotice.propTypes = {\n  children: PropTypes.string\n}\n\nexport default Notice\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport PropTypes from 'prop-types'\n\nimport Layout from '../layout'\nimport SEO from '../seo'\nimport Button from '../button'\n\nimport styles from './help.module.sass'\n\nexport const PureHelp = ({ data, toolInfo, children }) => {\n  const metadata = data?.site?.siteMetadata\n\n  return (\n    <Layout>\n      <SEO\n        title={`${metadata?.title}${toolInfo?.title} Help`}\n        canonical={`${toolInfo?.link}/help`}\n      />\n      <Button link route={toolInfo?.link}>\n        Back\n      </Button>\n      <h2\n        className={styles.toolTitle}\n      >{`${metadata?.title}${toolInfo?.title} Help`}</h2>\n      <p id={styles.description}>\n        {`${metadata?.title}${toolInfo?.title} ${toolInfo?.description}`}\n      </p>\n      {children}\n    </Layout>\n  )\n}\n\nPureHelp.propTypes = {\n  data: PropTypes.object,\n  toolInfo: PropTypes.shape({\n    title: PropTypes.string,\n    link: PropTypes.string,\n    description: PropTypes.string\n  }).isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.string,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.element, PropTypes.string])\n    )\n  ])\n}\n\nconst Help = props => {\n  const data = useStaticQuery(graphql`\n    query HelpTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return <PureHelp {...props} data={data} />\n}\n\nexport default Help\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button-module--btn--1Vo01\",\"neutral\":\"button-module--neutral--3CChK\",\"success\":\"button-module--success--MfUtK\",\"danger\":\"button-module--danger--3YJms\",\"small\":\"button-module--small--gFeIB\",\"buttonLink\":\"button-module--button-link--2l7Ks\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notice\":\"notice-module--notice--14xfk\"};"],"sourceRoot":""}