{"version":3,"sources":["webpack:///./src/components/button/index.js","webpack:///./src/pages/frequen/help/index.js","webpack:///./src/components/notice/index.js","webpack:///./src/components/help/index.js","webpack:///./src/components/button/button.module.sass","webpack:///./src/components/notice/notice.module.sass"],"names":["Button","ver","onClick","id","small","type","role","route","link","children","assignClasses","classes","styles","btn","find","el","href","className","buttonLink","PureFrequenHelp","data","metadata","site","siteMetadata","toolInfo","frequen","title","target","rel","FrequenHelp","props","useStaticQuery","Notice","notice","PureHelp","canonical","toolTitle","description","Help","module","exports"],"mappings":"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","file":"component---src-pages-frequen-help-index-js-f89af3486f28a3c4fa3d.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './button.module.sass'\n\nconst Button = ({\n  ver,\n  onClick,\n  id,\n  small,\n  type,\n  role,\n  route,\n  link,\n  children\n}) => {\n  const assignClasses = () => {\n    let classes = styles.btn\n\n    if (['neutral', 'success', 'danger'].find(el => el === ver)) {\n      classes += ` ${styles[ver]}`\n    }\n\n    if (small) {\n      classes += ` ${styles.small}`\n    }\n\n    return classes\n  }\n\n  if (link) {\n    return (\n      <a\n        href={`/${route}`}\n        id={id}\n        className={`${assignClasses()} ${styles.buttonLink}`}\n      >\n        {children}\n      </a>\n    )\n  } else {\n    return (\n      <button\n        onClick={onClick}\n        id={id}\n        className={assignClasses()}\n        type={type || 'button'}\n        role={role || 'button'}\n      >\n        {children}\n      </button>\n    )\n  }\n}\n\nButton.propTypes = {\n  ver: PropTypes.oneOf(['neutral', 'success', 'danger']),\n  onClick: PropTypes.func,\n  id: PropTypes.string,\n  small: PropTypes.bool,\n  type: PropTypes.string,\n  role: PropTypes.string,\n  classes: PropTypes.object,\n  route: PropTypes.string,\n  link: PropTypes.bool,\n  children: PropTypes.string\n}\n\nexport default Button\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nimport Notice from '../../../components/notice'\nimport Help from '../../../components/help'\n\nexport const PureFrequenHelp = ({ data }) => {\n  const metadata = data?.site?.siteMetadata\n  const toolInfo = metadata?.toolInfo?.frequen\n\n  return (\n    <Help toolInfo={toolInfo}>\n      <h3 id='using'>\n        Using {metadata?.title}\n        {toolInfo?.title}\n      </h3>\n      <h4 id='corpus'>Text Corpus</h4>\n      <p>\n        Input a corpus of text in the <strong>Text Corpus</strong> field. This\n        is the text that will be analyzed. The text can be phomic or phonetic,\n        or it can simply use the language&rsquo;s standard spelling system. For\n        best results, however, each sound that should be analyzed separately\n        will need its own grapheme or grapheme cluster. For example, in English,\n        the letter <code>y</code> would need to be differentiated based on when\n        it occurs as a consonant vs. when it occurs as a vowel. It does not\n        matter if punctuation is removed from the corpus, as any graphemes not\n        identified for analysis in the next step will be ignored by the tool.\n      </p>\n      <h4 id='phonemes'>Phonemes</h4>\n      <p>\n        Next, add a list of consonants and vowels accordingly to the{' '}\n        <strong>Consonants</strong> and <strong>Vowels</strong> lists. Separate\n        each of the segments with a forward slash (<code>/</code>\n        ). These segments can be single graphemes or grapheme clusters, and a\n        cluster can contain characters that are used in shorter segments. For\n        example, given the corpus <code>kanto</code> and the consonants{' '}\n        <code>n/t/nt</code>, the tool will identify one occurance of{' '}\n        <code>nt</code>, but no occurances of <code>n</code> or <code>t</code>.\n        Any graphemes not identified for analysis will be ignored. In the\n        previous example, since <code>k</code> was not added to the list of\n        consonants, the tool would not count its occurance.\n      </p>\n      <h4 id='allophones'>Allophones</h4>\n      <p>\n        Allophones can be added after a segment to indicate that multiple\n        segments should all be counted as occurances of the same segment.\n        Separate allophones with a comma (<code>,</code>\n        ). For example, given the corpus <code>potaná</code>, if the vowels list\n        contained <code>a/á/o</code>, the tool would identify one occurance each\n        of <code>a</code>, <code>á</code>, and <code>o</code>, but if the vowels\n        list contained <code>a,á/o</code>, the tool would identify two\n        occurances of <code>a</code> and one occurance of <code>o</code>.\n      </p>\n      <h4 id='analysis'>Analysis</h4>\n      <p>\n        When ready, click the <strong>Analyze</strong> button to run the\n        analysis. The tool will draw a graph and display a table showing the\n        frequencies of each of the identified segments in the text corpus.\n        Segments that never occur will be omitted from the graph and table.\n      </p>\n      <h4 id='filtering'>Filtering</h4>\n      <Notice>This feature is still in development.</Notice>\n      <p>\n        After a text has been analyzed, the results can be filtered to show only\n        certain segments. Choosing a filter will show the percentages in the\n        data as it compares to only segments of that type, rather than comparing\n        to all segments.\n      </p>\n      <p>\n        Currently, the results can be filtered to show only consonants or only\n        vowels. Additional filtering options will be added in the future.\n      </p>\n      <h4 id='files'>Saving and Loading Settings</h4>\n      <p>\n        Clicking the <strong>Save</strong> button will save the current settings\n        to the browser’s local storage and generate a small <code>.lngf</code>{' '}\n        text file containing the current settings that can be saved to your\n        disk. This <code>.lngf</code> file can be loaded using the{' '}\n        <strong>Open</strong> button to reload saved settings.\n      </p>\n      <h3 id='acknowledgments'>Acknowledgments</h3>\n      <p>\n        Much thanks should be given to Jan Strasser and{' '}\n        <a\n          href='http://akana.conlang.org/tools/frequentizer.html'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          the Frequentizer\n        </a>\n        . {metadata?.title}\n        {toolInfo?.title} was mainly built as a modernized and updated version\n        of the Frequentizer.\n      </p>\n    </Help>\n  )\n}\n\nconst FrequenHelp = props => {\n  const data = useStaticQuery(graphql`\n    query FrequenHelpQuery {\n      site {\n        siteMetadata {\n          title\n          toolInfo {\n            frequen {\n              title\n              link\n              description\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return <PureFrequenHelp {...props} data={data} />\n}\n\nexport default FrequenHelp\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './notice.module.sass'\n\nconst Notice = ({ children }) => <p className={styles.notice}>{children}</p>\n\nNotice.propTypes = {\n  children: PropTypes.string\n}\n\nexport default Notice\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport PropTypes from 'prop-types'\n\nimport Layout from '../layout'\nimport SEO from '../seo'\nimport Button from '../button'\n\nimport styles from './help.module.sass'\n\nexport const PureHelp = ({ data, toolInfo, children }) => {\n  const metadata = data?.site?.siteMetadata\n\n  return (\n    <Layout>\n      <SEO\n        title={`${metadata?.title}${toolInfo?.title} Help`}\n        canonical={`${toolInfo?.link}/help`}\n      />\n      <Button link route={toolInfo?.link}>\n        Back\n      </Button>\n      <h2\n        className={styles.toolTitle}\n      >{`${metadata?.title}${toolInfo?.title} Help`}</h2>\n      <p id={styles.description}>\n        {`${metadata?.title}${toolInfo?.title} ${toolInfo?.description}`}\n      </p>\n      {children}\n    </Layout>\n  )\n}\n\nPureHelp.propTypes = {\n  data: PropTypes.object,\n  toolInfo: PropTypes.shape({\n    title: PropTypes.string,\n    link: PropTypes.string,\n    description: PropTypes.string\n  }).isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.string,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.element, PropTypes.string])\n    )\n  ])\n}\n\nconst Help = props => {\n  const data = useStaticQuery(graphql`\n    query HelpTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return <PureHelp {...props} data={data} />\n}\n\nexport default Help\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"button-module--btn--1Vo01\",\"neutral\":\"button-module--neutral--3CChK\",\"success\":\"button-module--success--MfUtK\",\"danger\":\"button-module--danger--3YJms\",\"small\":\"button-module--small--gFeIB\",\"buttonLink\":\"button-module--button-link--2l7Ks\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notice\":\"notice-module--notice--14xfk\"};"],"sourceRoot":""}