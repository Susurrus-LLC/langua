{"version":3,"sources":["webpack://langua/./src/components/button/button.module.sass","webpack://langua/./src/components/button/index.js","webpack://langua/./src/components/help/index.js","webpack://langua/./src/components/notice/notice.module.sass","webpack://langua/./src/components/notice/index.js","webpack://langua/./src/pages/frequen/help/index.js"],"names":["ver","onClick","id","small","type","role","route","link","external","children","assignClasses","classes","styles","find","el","href","className","Link","to","PureHelp","data","toolInfo","metadata","site","siteMetadata","title","canonical","description","props","useStaticQuery","PureFrequenHelp","frequen","target","rel"],"mappings":"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","file":"component---src-pages-frequen-help-index-js-bbb80267a37900a89838.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"button-module--btn--Hxea0\",\"neutral\":\"button-module--neutral--1Jfpx\",\"success\":\"button-module--success--3v2EC\",\"danger\":\"button-module--danger--UAgqr\",\"small\":\"button-module--small--aOOYC\",\"buttonLink\":\"button-module--button-link--kKU0I\"};","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './button.module.sass'\nimport { Link } from 'gatsby'\n\nconst Button = ({\n  ver,\n  onClick,\n  id,\n  small,\n  type,\n  role,\n  route,\n  link,\n  external,\n  children\n}) => {\n  const assignClasses = () => {\n    let classes = styles.btn\n\n    if (['neutral', 'success', 'danger'].find(el => el === ver)) {\n      classes += ` ${styles[ver]}`\n    }\n\n    if (small) {\n      classes += ` ${styles.small}`\n    }\n\n    return classes\n  }\n\n  if (link) {\n    if (external) {\n      return (\n        <a\n          href={`/${route}`}\n          id={id}\n          className={`${assignClasses()} ${styles.buttonLink}`}\n        >\n          {children}\n        </a>\n      )\n    } else {\n      return (\n        <Link\n          to={`/${route}`}\n          id={id}\n          className={`${assignClasses()} ${styles.buttonLink}`}\n        >\n          {children}\n        </Link>\n      )\n    }\n  } else {\n    return (\n      <button\n        onClick={onClick}\n        id={id}\n        className={assignClasses()}\n        type={type || 'button'}\n        role={role || 'button'}\n      >\n        {children}\n      </button>\n    )\n  }\n}\n\nButton.propTypes = {\n  ver: PropTypes.oneOf(['neutral', 'success', 'danger']),\n  onClick: PropTypes.func,\n  id: PropTypes.string,\n  small: PropTypes.bool,\n  type: PropTypes.string,\n  role: PropTypes.string,\n  classes: PropTypes.object,\n  route: PropTypes.string,\n  link: PropTypes.bool,\n  external: PropTypes.bool,\n  children: PropTypes.string\n}\n\nexport default Button\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport PropTypes from 'prop-types'\n\nimport Layout from '../layout'\nimport SEO from '../seo'\nimport Button from '../button'\n\nimport styles from './help.module.sass'\n\nexport const PureHelp = ({ data, toolInfo, children }) => {\n  const metadata = data?.site?.siteMetadata\n\n  return (\n    <Layout>\n      <SEO\n        title={`${metadata?.title}${toolInfo?.title} Help`}\n        canonical={`${toolInfo?.link}/help`}\n      />\n      <Button link route={toolInfo?.link}>\n        Back\n      </Button>\n      <h2\n        className={styles.toolTitle}\n      >{`${metadata?.title}${toolInfo?.title} Help`}</h2>\n      <p id={styles.description}>\n        {`${metadata?.title}${toolInfo?.title} ${toolInfo?.description}`}\n      </p>\n      {children}\n    </Layout>\n  )\n}\n\nPureHelp.propTypes = {\n  data: PropTypes.object,\n  toolInfo: PropTypes.shape({\n    title: PropTypes.string,\n    link: PropTypes.string,\n    description: PropTypes.string\n  }).isRequired,\n  children: PropTypes.oneOfType([\n    PropTypes.element,\n    PropTypes.string,\n    PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.element, PropTypes.string])\n    )\n  ])\n}\n\nconst Help = props => {\n  const data = useStaticQuery(graphql`\n    query HelpTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return <PureHelp {...props} data={data} />\n}\n\nexport default Help\n","// extracted by mini-css-extract-plugin\nexport default {\"notice\":\"notice-module--notice--1QCeC\"};","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport styles from './notice.module.sass'\n\nconst Notice = ({ children }) => <p className={styles.notice}>{children}</p>\n\nNotice.propTypes = {\n  children: PropTypes.string\n}\n\nexport default Notice\n","import React from 'react'\nimport { graphql, useStaticQuery } from 'gatsby'\n\nimport Notice from '../../../components/notice'\nimport Help from '../../../components/help'\n\nexport const PureFrequenHelp = ({ data }) => {\n  const metadata = data?.site?.siteMetadata\n  const toolInfo = metadata?.toolInfo?.frequen\n\n  return (\n    <Help toolInfo={toolInfo}>\n      <h3 id='using'>\n        Using {metadata?.title}\n        {toolInfo?.title}\n      </h3>\n      <h4 id='corpus'>Text Corpus</h4>\n      <p>\n        Input a corpus of text in the <strong>Text Corpus</strong> field. This\n        is the text that will be analyzed. The text can be phomic or phonetic,\n        or it can simply use the language&rsquo;s standard spelling system. For\n        best results, however, each sound that should be analyzed separately\n        will need its own grapheme or grapheme cluster. For example, in English,\n        the letter <code>y</code> would need to be differentiated based on when\n        it occurs as a consonant vs. when it occurs as a vowel. It does not\n        matter if punctuation is removed from the corpus, as any graphemes not\n        identified for analysis in the next step will be ignored by the tool.\n      </p>\n      <h4 id='phonemes'>Phonemes</h4>\n      <p>\n        Next, add a list of consonants and vowels accordingly to the{' '}\n        <strong>Consonants</strong> and <strong>Vowels</strong> lists. Separate\n        each of the segments with a forward slash (<code>/</code>\n        ). These segments can be single graphemes or grapheme clusters, and a\n        cluster can contain characters that are used in shorter segments. For\n        example, given the corpus <code>kanto</code> and the consonants{' '}\n        <code>n/t/nt</code>, the tool will identify one occurance of{' '}\n        <code>nt</code>, but no occurances of <code>n</code> or <code>t</code>.\n        Any graphemes not identified for analysis will be ignored. In the\n        previous example, since <code>k</code> was not added to the list of\n        consonants, the tool would not count its occurance.\n      </p>\n      <h4 id='allophones'>Allophones</h4>\n      <p>\n        Allophones can be added after a segment to indicate that multiple\n        segments should all be counted as occurances of the same segment.\n        Separate allophones with a comma (<code>,</code>\n        ). For example, given the corpus <code>potaná</code>, if the vowels list\n        contained <code>a/á/o</code>, the tool would identify one occurance each\n        of <code>a</code>, <code>á</code>, and <code>o</code>, but if the vowels\n        list contained <code>a,á/o</code>, the tool would identify two\n        occurances of <code>a</code> and one occurance of <code>o</code>.\n      </p>\n      <h4 id='analysis'>Analysis</h4>\n      <p>\n        When ready, click the <strong>Analyze</strong> button to run the\n        analysis. The tool will draw a graph and display a table showing the\n        frequencies of each of the identified segments in the text corpus.\n        Segments that never occur will be omitted from the graph and table.\n      </p>\n      <h4 id='filtering'>Filtering</h4>\n      <Notice>This feature is still in development.</Notice>\n      <p>\n        After a text has been analyzed, the results can be filtered to show only\n        certain segments. Choosing a filter will show the percentages in the\n        data as it compares to only segments of that type, rather than comparing\n        to all segments.\n      </p>\n      <p>\n        Currently, the results can be filtered to show only consonants or only\n        vowels. Additional filtering options will be added in the future.\n      </p>\n      <h4 id='files'>Saving and Loading Settings</h4>\n      <p>\n        Clicking the <strong>Save</strong> button will save the current settings\n        to the browser’s local storage and generate a small <code>.lngf</code>{' '}\n        text file containing the current settings that can be saved to your\n        disk. This <code>.lngf</code> file can be loaded using the{' '}\n        <strong>Open</strong> button to reload saved settings.\n      </p>\n      <h3 id='acknowledgments'>Acknowledgments</h3>\n      <p>\n        Much thanks should be given to Jan Strasser and{' '}\n        <a\n          href='http://akana.conlang.org/tools/frequentizer.html'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          the Frequentizer\n        </a>\n        . {metadata?.title}\n        {toolInfo?.title} was mainly built as a modernized and updated version\n        of the Frequentizer.\n      </p>\n    </Help>\n  )\n}\n\nconst FrequenHelp = props => {\n  const data = useStaticQuery(graphql`\n    query FrequenHelpQuery {\n      site {\n        siteMetadata {\n          title\n          toolInfo {\n            frequen {\n              title\n              link\n              description\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  return <PureFrequenHelp {...props} data={data} />\n}\n\nexport default FrequenHelp\n"],"sourceRoot":""}